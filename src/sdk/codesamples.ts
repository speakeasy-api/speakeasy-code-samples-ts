/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  codesamplesGetAsync,
  GetAsyncAcceptEnum,
} from "../funcs/codesamplesGetAsync.js";
import {
  codesamplesPreview,
  PreviewAcceptEnum,
} from "../funcs/codesamplesPreview.js";
import { codesamplesPreviewAsync } from "../funcs/codesamplesPreviewAsync.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { PreviewAcceptEnum } from "../funcs/codesamplesPreview.js";

export { GetAsyncAcceptEnum } from "../funcs/codesamplesGetAsync.js";

export class Codesamples extends ClientSDK {
  /**
   * Generate Code Sample previews from a file and configuration parameters.
   *
   * @remarks
   * This endpoint generates Code Sample previews from a file and configuration parameters.
   */
  async preview(
    request: components.CodeSampleSchemaInput,
    options?: RequestOptions & { acceptHeaderOverride?: PreviewAcceptEnum },
  ): Promise<operations.GenerateCodeSamplePreviewResponse> {
    return unwrapAsync(codesamplesPreview(
      this,
      request,
      options,
    ));
  }

  /**
   * Initiate asynchronous Code Sample preview generation from a file and configuration parameters, receiving an async JobID response for polling.
   *
   * @remarks
   * This endpoint generates Code Sample previews from a file and configuration parameters, receiving an async JobID response for polling.
   */
  async previewAsync(
    request: components.CodeSampleSchemaInput,
    options?: RequestOptions,
  ): Promise<operations.GenerateCodeSamplePreviewAsyncResponseBody> {
    return unwrapAsync(codesamplesPreviewAsync(
      this,
      request,
      options,
    ));
  }

  /**
   * Poll for the result of an asynchronous Code Sample preview generation.
   *
   * @remarks
   * Poll for the result of an asynchronous Code Sample preview generation.
   */
  async getAsync(
    jobID: string,
    options?: RequestOptions & { acceptHeaderOverride?: GetAsyncAcceptEnum },
  ): Promise<operations.GetCodeSamplePreviewAsyncResponse> {
    return unwrapAsync(codesamplesGetAsync(
      this,
      jobID,
      options,
    ));
  }
}
