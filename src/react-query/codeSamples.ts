/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCodeSamplesCore } from "../core.js";
import { codeSamplesGet } from "../funcs/codeSamplesGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSpeakeasyCodeSamplesContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CodeSamplesQueryData = components.UsageSnippets;

/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
export function useCodeSamples(
  request: operations.GetCodeSamplesRequest,
  options?: QueryHookOptions<CodeSamplesQueryData>,
): UseQueryResult<CodeSamplesQueryData, Error> {
  const client = useSpeakeasyCodeSamplesContext();
  return useQuery({
    ...buildCodeSamplesQuery(client, request, options),
    ...options,
  });
}

/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
export function useCodeSamplesSuspense(
  request: operations.GetCodeSamplesRequest,
  options?: SuspenseQueryHookOptions<CodeSamplesQueryData>,
): UseSuspenseQueryResult<CodeSamplesQueryData, Error> {
  const client = useSpeakeasyCodeSamplesContext();
  return useSuspenseQuery({
    ...buildCodeSamplesQuery(client, request, options),
    ...options,
  });
}

export function prefetchCodeSamples(
  queryClient: QueryClient,
  client$: SpeakeasyCodeSamplesCore,
  request: operations.GetCodeSamplesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCodeSamplesQuery(client$, request),
  });
}

export function setCodeSamplesData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      registryUrl?: string | undefined;
      operationIds?: Array<string> | undefined;
      methodPaths?: Array<operations.MethodPaths> | undefined;
      languages?: Array<string> | undefined;
    },
  ],
  data: CodeSamplesQueryData,
): CodeSamplesQueryData | undefined {
  const key = queryKeyCodeSamples(...queryKeyBase);

  return client.setQueryData<CodeSamplesQueryData>(key, data);
}

export function invalidateCodeSamples(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      parameters: {
        registryUrl?: string | undefined;
        operationIds?: Array<string> | undefined;
        methodPaths?: Array<operations.MethodPaths> | undefined;
        languages?: Array<string> | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasyapi/code-samples",
      "codeSamples",
      "get",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCodeSamples(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasyapi/code-samples", "codeSamples", "get"],
  });
}

export function buildCodeSamplesQuery(
  client$: SpeakeasyCodeSamplesCore,
  request: operations.GetCodeSamplesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<CodeSamplesQueryData>;
} {
  return {
    queryKey: queryKeyCodeSamples({
      registryUrl: request.registryUrl,
      operationIds: request.operationIds,
      methodPaths: request.methodPaths,
      languages: request.languages,
    }),
    queryFn: async function codeSamplesQueryFn(
      ctx,
    ): Promise<CodeSamplesQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(codeSamplesGet(client$, request, mergedOptions));
    },
  };
}

export function queryKeyCodeSamples(parameters: {
  registryUrl?: string | undefined;
  operationIds?: Array<string> | undefined;
  methodPaths?: Array<operations.MethodPaths> | undefined;
  languages?: Array<string> | undefined;
}): QueryKey {
  return ["@speakeasyapi/code-samples", "codeSamples", "get", parameters];
}
