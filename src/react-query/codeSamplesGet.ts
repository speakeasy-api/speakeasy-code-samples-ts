/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SpeakeasyCodeSamplesCore } from "../core.js";
import { codeSamplesGet } from "../funcs/codeSamplesGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSpeakeasyCodeSamplesContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CodeSamplesGetQueryData = components.UsageSnippets;

/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
export function useCodeSamplesGet(
  request: operations.GetCodeSamplesRequest,
  options?: QueryHookOptions<CodeSamplesGetQueryData>,
): UseQueryResult<CodeSamplesGetQueryData, Error> {
  const client = useSpeakeasyCodeSamplesContext();
  return useQuery({
    ...buildCodeSamplesGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Retrieve usage snippets
 *
 * @remarks
 * Retrieve usage snippets from an OpenAPI document stored in the registry. Supports filtering by language and operation ID.
 */
export function useCodeSamplesGetSuspense(
  request: operations.GetCodeSamplesRequest,
  options?: SuspenseQueryHookOptions<CodeSamplesGetQueryData>,
): UseSuspenseQueryResult<CodeSamplesGetQueryData, Error> {
  const client = useSpeakeasyCodeSamplesContext();
  return useSuspenseQuery({
    ...buildCodeSamplesGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCodeSamplesGet(
  queryClient: QueryClient,
  client$: SpeakeasyCodeSamplesCore,
  request: operations.GetCodeSamplesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCodeSamplesGetQuery(
      client$,
      request,
    ),
  });
}

export function setCodeSamplesGetData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      registryUrl?: string | undefined;
      operationIds?: Array<string> | undefined;
      methodPaths?: Array<operations.MethodPaths> | undefined;
      languages?: Array<string> | undefined;
    },
  ],
  data: CodeSamplesGetQueryData,
): CodeSamplesGetQueryData | undefined {
  const key = queryKeyCodeSamplesGet(...queryKeyBase);

  return client.setQueryData<CodeSamplesGetQueryData>(key, data);
}

export function invalidateCodeSamplesGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      registryUrl?: string | undefined;
      operationIds?: Array<string> | undefined;
      methodPaths?: Array<operations.MethodPaths> | undefined;
      languages?: Array<string> | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@speakeasyapi/code-samples",
      "codeSamples",
      "get",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCodeSamplesGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@speakeasyapi/code-samples", "codeSamples", "get"],
  });
}

export function buildCodeSamplesGetQuery(
  client$: SpeakeasyCodeSamplesCore,
  request: operations.GetCodeSamplesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<CodeSamplesGetQueryData>;
} {
  return {
    queryKey: queryKeyCodeSamplesGet({
      registryUrl: request.registryUrl,
      operationIds: request.operationIds,
      methodPaths: request.methodPaths,
      languages: request.languages,
    }),
    queryFn: async function codeSamplesGetQueryFn(
      ctx,
    ): Promise<CodeSamplesGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(codeSamplesGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCodeSamplesGet(
  parameters: {
    registryUrl?: string | undefined;
    operationIds?: Array<string> | undefined;
    methodPaths?: Array<operations.MethodPaths> | undefined;
    languages?: Array<string> | undefined;
  },
): QueryKey {
  return ["@speakeasyapi/code-samples", "codeSamples", "get", parameters];
}
