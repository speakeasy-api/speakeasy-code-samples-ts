/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKCore } from "../core.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

export enum PreviewAcceptEnum {
  applicationJson = "application/json",
  applicationXYaml = "application/x-yaml",
}

/**
 * Generate Code Sample previews from a file and configuration parameters.
 *
 * @remarks
 * This endpoint generates Code Sample previews from a file and configuration parameters.
 */
export async function codesamplesPreview(
  client: SDKCore,
  request: components.CodeSampleSchemaInput,
  options?: RequestOptions & { acceptHeaderOverride?: PreviewAcceptEnum },
): Promise<
  Result<
    operations.GenerateCodeSamplePreviewResponse,
    | errors.ErrorT
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => components.CodeSampleSchemaInput$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = new FormData();

  body.append("languages", String(payload.languages));
  if (isBlobLike(payload.schema_file)) {
    body.append("schema_file", payload.schema_file);
  } else if (isReadableStream(payload.schema_file.content)) {
    const buffer = await readableStreamToArrayBuffer(
      payload.schema_file.content,
    );
    const blob = new Blob([buffer], { type: "application/octet-stream" });
    body.append("schema_file", blob);
  } else {
    body.append(
      "schema_file",
      new Blob([payload.schema_file.content], {
        type: "application/octet-stream",
      }),
      payload.schema_file.fileName,
    );
  }
  if (payload.package_name !== undefined) {
    body.append("package_name", payload.package_name);
  }
  if (payload.sdk_class_name !== undefined) {
    body.append("sdk_class_name", payload.sdk_class_name);
  }

  const path = pathToFunc("/v1/code_sample/preview")();

  const headers = new Headers({
    Accept: options?.acceptHeaderOverride
      || "application/json;q=1, application/x-yaml;q=0",
  });

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    operationID: "generateCodeSamplePreview",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    path: path,
    headers: headers,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.GenerateCodeSamplePreviewResponse,
    | errors.ErrorT
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.stream(200, operations.GenerateCodeSamplePreviewResponse$inboundSchema, {
      ctype: "application/x-yaml",
    }),
    M.stream(200, operations.GenerateCodeSamplePreviewResponse$inboundSchema, {
      ctype: "application/json",
    }),
    M.jsonErr(["4XX", "5XX"], errors.ErrorT$inboundSchema),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
